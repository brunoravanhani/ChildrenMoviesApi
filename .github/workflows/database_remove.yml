name: Destroy Database

on:
  workflow_dispatch:

env:
  
  AWS_REGION : us-east-1

permissions:
      id-token: write  
      contents: read

jobs:
  DestroyDatabaseTerraform:
    runs-on: ubuntu-latest
    environment: PROD
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd terraform
          cd database
          terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: |
          cd terraform
          cd database
          terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd terraform
          cd database
          terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: |
          cd terraform
          cd database
          terraform destroy -auto-approve -input=false